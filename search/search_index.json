{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"labos","title":"labos"},{"location":"#labos","text":"","title":"labos"},{"location":"vault/ca/","text":"Generar certificados TLS https://www.vaultproject.io/docs/secrets/pki Primero habilitamos el secret: vault secrets enable pki Generamos el certificado raiz para dominios *.japi: vault write \\ pki/root/generate/internal not_after=\"9999-12-31T23:59:59Z\" common_name=japi -format=json | tee generate.json Generamos el certificado raiz para dominios *.japi: vault write \\ pki/root/generate/internal not_after=\"9999-12-31T23:59:59Z\" common_name=japi -format=json | tee generate.json Ejemplo de la generaci\u00f3n de un certificado: vault write \\ pki/issue/japi \\ ttl=8760h \\ common_name=vault.japi \\ alt_names=mini.japi \\ ip_sans=127.0.0.1,192.168.1.3 \\ -format=json \\ | tee tls.json","title":"Generar certificados TLS"},{"location":"vault/ca/#generar-certificados-tls","text":"https://www.vaultproject.io/docs/secrets/pki Primero habilitamos el secret: vault secrets enable pki Generamos el certificado raiz para dominios *.japi: vault write \\ pki/root/generate/internal not_after=\"9999-12-31T23:59:59Z\" common_name=japi -format=json | tee generate.json Generamos el certificado raiz para dominios *.japi: vault write \\ pki/root/generate/internal not_after=\"9999-12-31T23:59:59Z\" common_name=japi -format=json | tee generate.json Ejemplo de la generaci\u00f3n de un certificado: vault write \\ pki/issue/japi \\ ttl=8760h \\ common_name=vault.japi \\ alt_names=mini.japi \\ ip_sans=127.0.0.1,192.168.1.3 \\ -format=json \\ | tee tls.json","title":"Generar certificados TLS"},{"location":"vault/mfa/","text":"Configurar MFA Elegimos la entidad a la que le queremos forzar el MFA: $ vault list identity/entity/name Keys ---- alice entity_4f7b555b japi Obtenemos el id de la entidad (ENTITY_ID): $ vault read identity/entity/name/alice Key Value --- ----- aliases [map[canonical_id:f88a7846-40ff-2d9a-5939-2df9ceaa4585 creation_time:2022-04-09T12:34:25.047356Z custom_metadata:<nil> id:0c5abb03-e95e-a3e0-cb02-d23e3c57eca0 last_update_time:2022-04-09T12:34:25.047356Z local:false merged_from_canonical_ids:<nil> metadata:<nil> mount_accessor:auth_userpass_c7fa2f53 mount_path:auth/userpass/ mount_type:userpass name:alice]] creation_time 2022-04-09T12:33:45.969261Z direct_group_ids [] disabled false group_ids [] id f88a7846-40ff-2d9a-5939-2df9ceaa4585 inherited_group_ids [] last_update_time 2022-04-09T12:33:45.969261Z merged_entity_ids <nil> metadata <nil> name alice namespace_id root policies [] Habilitamos el m\u00e9todo MFA y obtenemos su id (METHOD_ID: $ vault write identity/mfa/method/totp issuer=vault Key Value --- ----- method_id 540bda78-3719-ef80-226f-4090eb99fb8f Creamos un login enforcement para un auth: $ vault write \\ identity/mfa/login-enforcement/learn \\ mfa_method_ids=540bda78-3719-ef80-226f-4090eb99fb8f \\ auth_method_accessors=auth_userpass_c7fa2f53 Success! Data written to: identity/mfa/login-enforcement/learn","title":"Configurar MFA"},{"location":"vault/mfa/#configurar-mfa","text":"Elegimos la entidad a la que le queremos forzar el MFA: $ vault list identity/entity/name Keys ---- alice entity_4f7b555b japi Obtenemos el id de la entidad (ENTITY_ID): $ vault read identity/entity/name/alice Key Value --- ----- aliases [map[canonical_id:f88a7846-40ff-2d9a-5939-2df9ceaa4585 creation_time:2022-04-09T12:34:25.047356Z custom_metadata:<nil> id:0c5abb03-e95e-a3e0-cb02-d23e3c57eca0 last_update_time:2022-04-09T12:34:25.047356Z local:false merged_from_canonical_ids:<nil> metadata:<nil> mount_accessor:auth_userpass_c7fa2f53 mount_path:auth/userpass/ mount_type:userpass name:alice]] creation_time 2022-04-09T12:33:45.969261Z direct_group_ids [] disabled false group_ids [] id f88a7846-40ff-2d9a-5939-2df9ceaa4585 inherited_group_ids [] last_update_time 2022-04-09T12:33:45.969261Z merged_entity_ids <nil> metadata <nil> name alice namespace_id root policies [] Habilitamos el m\u00e9todo MFA y obtenemos su id (METHOD_ID: $ vault write identity/mfa/method/totp issuer=vault Key Value --- ----- method_id 540bda78-3719-ef80-226f-4090eb99fb8f Creamos un login enforcement para un auth: $ vault write \\ identity/mfa/login-enforcement/learn \\ mfa_method_ids=540bda78-3719-ef80-226f-4090eb99fb8f \\ auth_method_accessors=auth_userpass_c7fa2f53 Success! Data written to: identity/mfa/login-enforcement/learn","title":"Configurar MFA"},{"location":"vault/oidc/","text":"Configurar OIDC Aqui tienes la guia: https://www.vaultproject.io/docs/auth/jwt Lo habilitamos: vault auth enable oidc Configuramos en el proveedor OIDC la aplicaci\u00f3n con las siguientes Redirect URIs: https://www.vaultproject.io/docs/auth/jwt/oidc_providers#gitlab http://localhost:8250/oidc/callback https://vault.japi:8200/ui/vault/auth/oidc/oidc/callback Configuramos el m\u00e9todo de auth: vault write \\ auth/oidc/config \\ oidc_discovery_url=\"https://gitlab.kolokium.com\" \\ oidc_client_id=\"APPLICATION_ID\" \\ oidc_client_secret=\"SECRET\" \\ default_role=\"demo\" \\ bound_issuer=\u201clocalhost\u201d Creamos el role: $ vault write auth/oidc/role/demo -<<EOF { \"user_claim\": \"sub\", \"allowed_redirect_uris\": \"http://localhost:8250/oidc/callback,https://vault.japi:8200/ui/vault/auth/oidc/oidc/callback\", \"bound_audiences\": \"cca3b951238a75254fea5d7624ebdf64898f93c82de27eba39b01fdc7a2b5a0b\", \"oidc_scopes\": \"openid\", \"role_type\": \"oidc\", \"policies\": \"admin\", \"ttl\": \"1h\" } EOF","title":"Configurar OIDC"},{"location":"vault/oidc/#configurar-oidc","text":"Aqui tienes la guia: https://www.vaultproject.io/docs/auth/jwt Lo habilitamos: vault auth enable oidc Configuramos en el proveedor OIDC la aplicaci\u00f3n con las siguientes Redirect URIs: https://www.vaultproject.io/docs/auth/jwt/oidc_providers#gitlab http://localhost:8250/oidc/callback https://vault.japi:8200/ui/vault/auth/oidc/oidc/callback Configuramos el m\u00e9todo de auth: vault write \\ auth/oidc/config \\ oidc_discovery_url=\"https://gitlab.kolokium.com\" \\ oidc_client_id=\"APPLICATION_ID\" \\ oidc_client_secret=\"SECRET\" \\ default_role=\"demo\" \\ bound_issuer=\u201clocalhost\u201d Creamos el role: $ vault write auth/oidc/role/demo -<<EOF { \"user_claim\": \"sub\", \"allowed_redirect_uris\": \"http://localhost:8250/oidc/callback,https://vault.japi:8200/ui/vault/auth/oidc/oidc/callback\", \"bound_audiences\": \"cca3b951238a75254fea5d7624ebdf64898f93c82de27eba39b01fdc7a2b5a0b\", \"oidc_scopes\": \"openid\", \"role_type\": \"oidc\", \"policies\": \"admin\", \"ttl\": \"1h\" } EOF","title":"Configurar OIDC"}]}